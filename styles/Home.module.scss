@import url('https://fonts.googleapis.com/css2?family=Monoton&family=Space+Mono&display=swap');

// n is number of stars required
@function multiple-box-shadow ($n) {
  $value: '#{random(2000)}px #{random(2000)}px #FFF';
  @for $i from 2 through $n {
    $value: '#{$value} , #{random(2000)}px #{random(2000)}px #FFF';
  }
  @return unquote($value);
}

$shadows-small:  multiple-box-shadow(700);
$shadows-medium: multiple-box-shadow(200);
$shadows-big:    multiple-box-shadow(100);

.stars {
  width: 1px;
  height: 1px;
  background: transparent;
  box-shadow: $shadows-small;
  animation			: animStar 50s linear infinite;
    
  &:after{
    content: " ";
    position: absolute;
    top: 2000px;
    width: 1px;
    height: 1px;
    background: transparent;
    box-shadow: $shadows-small;
  }
}

.stars2 {
  width: 2px;
  height: 2px;
  background: transparent;
  box-shadow: $shadows-medium;
  animation			: animStar 100s linear infinite;
    
  &:after {
    content: " ";
    position: absolute;
    top: 2000px;
    width: 2px;
    height: 2px;
    background: transparent;
    box-shadow: $shadows-medium;
  }
}

.stars3 {
  width: 3px;
  height: 3px;
  background: transparent;
  box-shadow: $shadows-big;
  animation			: animStar 150s linear infinite;
    
  &:after {
    content: " ";
    position: absolute;
    top: 2000px;
    width: 3px;
    height: 3px;
    background: transparent;
    box-shadow: $shadows-big;
  }
}

@keyframes animStar{
  from	{
    transform: translateY(0px);
  }
  to		{
    transform: translateY(-2000px);
  }
}

.main {
  padding: 2rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100vh;
  width: 100%;
}

@keyframes noise-anim {
  $steps:20;
  @for $i from 0 through $steps{
    #{percentage($i*(calc(1 / $steps)))}{
      clip:rect(random(100)+px,9999px,random(100)+px,0);
    }
  }
}

@keyframes noise-anim-2 {
  $steps:20;
  @for $i from 0 through $steps{
    #{percentage($i*(calc(1 / $steps)))}{
      clip:rect(random(100)+px,9999px,random(100)+px,0);
    }
  }
}

.title {
  font-family: 'Monoton';
  font-weight: 400;
  font-size: 100px;

  @media screen and (max-width: 1024px) {
    font-size: 50px;
  }
  
  &__letter:nth-child(n) {
    color:#e92efb;
  }

  &__letter:nth-child(2n) {
    color: rgba(254,32,120,255);
  }
}

.glitch {
  font-family: 'Space Mono', monospace;
  color: white;
  font-size: 70px;
  position: relative;
  width: unset;
  margin-top: 18rem;
  margin-left: 8px;

  @media screen and (max-width: 1024px) {
    font-size: 30px;
    margin-top: 14rem;
    margin-left: 4px;
  }
}

.glitch:after {
  content: attr(data-text);
  position: absolute;
  left: 2px;
  text-shadow: -1px 0 #e92efb;
  top: 0;
  color: white;
  background: transparent;
  overflow: hidden;
  clip: rect(0,900px,0,0); 
  animation: noise-anim 2s infinite linear alternate-reverse;
}

.glitch:before {
  content:attr(data-text);
  position:absolute;
  left:-2px;
  text-shadow:1px 0 rgba(254,32,120,255); 
  top:0;
  color:white;
  background:transparent;
  overflow:hidden;
  clip:rect(0,900px,0,0); 
  animation:noise-anim-2 3s infinite linear alternate-reverse;
}

$sphere-size-desktop: 25vmin;
$sphere-size-mobile: 45vmin;

@mixin absolutely {
  position: absolute;
  top:0;right:0;bottom:0;left:0;
  margin: 0 auto;
}

.sphere {
  @include absolutely();
  margin-top: 14rem;
  width: $sphere-size-desktop;
  height: $sphere-size-desktop;
  animation: spinSphere 20s infinite linear;
  transform-style: preserve-3d;

  @media screen and (max-width: 1024px) {
    width: $sphere-size-mobile;
    height: $sphere-size-mobile;
    margin-top: 9rem;
  }

  [class^="ring"] {
    @include absolutely();
    width: $sphere-size-desktop;
    height: $sphere-size-desktop;
    border-radius: 50%;
    overflow: hidden;

    @media screen and (max-width: 1024px) {
      width: $sphere-size-mobile;
      height: $sphere-size-mobile;
    }
  }

  @for $i from 1 through 36 {
    [class$="#{$i}"] {
      transform: rotateY($i * 2deg) rotateX($i*2deg) rotateZ($i * 3deg);
      box-shadow:0 0 (1px + ($i * 2)) rgba((255 - ($i * 2)),(170 - round($i * .5)),(45 * round(calc($i / 3))), 0.1), inset 0 0 (1px + ($i * 2)) rgba((255 - ($i * 2)),(170 - round($i * .5)),(45 * round(calc($i / 3))), 0.1);
    }
  } 
}

@keyframes spinSphere {
  from {
    transform: rotateZ(0deg) rotateX(0deg) rotateY(0deg);
  }
  to {
    transform: rotateZ(360deg) rotateX(-360deg) rotateZ(360deg);
  }
}
